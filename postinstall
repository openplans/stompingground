#!/bin/sh

# =============================================================================
# Post-install hook file for configuring dotcloud server

echo "Writing the local settings file..."
echo "  - Setting the path to the Shareabouts config"
echo "  - Setting the dataset access location and key"

cat >> src/project/local_settings.py <<EOF

import json
import os.path
from os.path import abspath, dirname, path as pathjoin

with open('/home/dotcloud/environment.json') as f:
    env = json.load(f)

SHAREABOUTS = {
    'default': {
        'DATASET_KEY': env.get('SHAREABOUTS_DATASET_KEY', 'SHAREABOUTS_DATASET_KEY-not-set-in-dotcloud-environment!!!'),
        'DATASET_ROOT': env.get('SHAREABOUTS_DATASET_ROOT', 'SHAREABOUTS_DATASET_ROOT-not-set-in-dotcloud-environment!!!'),
        'CONFIG': os.path.abspath(os.path.dirname(__file__)),
    
        'CONTEXT': {
            'analytics_key': env.get('SHAREABOUTS_ANALYTICS_KEY', 'SHAREABOUTS_ANALYTICS_KEY-not-set-in-dotcloud-environment!!!'),
            'feedback_key': env.get('SHAREABOUTS_FEEDBACK_KEY', 'SHAREABOUTS_FEEDBACK_KEY-not-set-in-dotcloud-environment!!!'),
        }
    }
}

instances = env.get('STOMPINGGROUND_INSTANCES', None)

if instances is not None:
    SHAREABOUTS = {}

    for instance in instances.split(','):
        SHAREABOUTS[instance] = {
            'DATASET_KEY': env.get('SHAREABOUTS_DATASET_KEY', 'SHAREABOUTS_DATASET_KEY-not-set-in-dotcloud-environment!!!'),
            'DATASET_ROOT': env.get('SHAREABOUTS_DATASET_ROOT', 'SHAREABOUTS_DATASET_ROOT-not-set-in-dotcloud-environment!!!'),
            'CONFIG': abspath(pathjoin(dirname(__file__), instance)),

            'CONTEXT': {
                'analytics_key': env.get('SHAREABOUTS_ANALYTICS_KEY', 'SHAREABOUTS_ANALYTICS_KEY-not-set-in-dotcloud-environment!!!'),
                'feedback_key': env.get('SHAREABOUTS_FEEDBACK_KEY', 'SHAREABOUTS_FEEDBACK_KEY-not-set-in-dotcloud-environment!!!'),
            }
        }

STATIC_ROOT = '/home/dotcloud/current/static/'

# Debug is False by default, true if set in the environment.
DEBUG = (env.get('DEBUG', 'False') in ['true', 'True'])
TEMPLATE_DEBUG = DEBUG

ALLOWED_HOSTS = ['*']

# The ADMINS enviromnent variable should be a comma-separated list of email
# addresses that should be notified when an error is logged in the app.
ADMINS = [
    (admin.split('@')[0], admin)
    for admin in env.get('ADMINS', '').split(',')
]

# Use the DotCloud project name as the prefix on all log emails.
EMAIL_SUBJECT_PREFIX = '[' + env.get('DOTCLOUD_PROJECT', 'StompingGround') + '] '

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'simple': {
            'format': '%(levelname)s %(asctime)s\n%(message)s',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'log_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'simple',
            'filename': '/var/log/supervisor/app.log',
            'maxBytes': 1024*1024*25, # 25 MB
            'backupCount': 5,
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'log_file', 'mail_admins'],
            'level': 'WARNING',
        },
        'stompingground': {
            'handlers': ['console', 'log_file', 'mail_admins'],
            'level': 'DEBUG',
        },
    }
}
EOF

echo "Setting up static file service..."
src/manage.py collectstatic --noinput

echo "Configuring nginx to serve static files..."
cat >> nginx.conf <<EOF
location /static/ { root /home/dotcloud/current ; }
EOF

echo "Compiling translations..."
cd src/stompingground
../manage.py compilemessages
cd ../..
